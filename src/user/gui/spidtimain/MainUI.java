/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package user.gui.spidtimain;
import data.niftilibrary.niftijio.*;
import domain.mathUtils.arrayTools.ArrayOperations;
import java.io.IOException;
import java.io.File;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.swing.*;
import user.gui.tools.UITools;
//import javax.jnlp.*;

/**
 *  <p>This is the main class for the pspiDTI UI it includes the menus and
 * a NIFTI file viewer.</p>  
 * 
 * @author Diego Garibay-Pulido 2016
 */
public class MainUI extends javax.swing.JFrame {

    /**
     * Creates new form MainUI
     */
    NiftiVolume niiVol;
    double[][] R = new double[3][3];
    double coronalScale;
    double saggitalScale;
    double axialScale;
    Point prevMouse;
    
    
    public MainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        coronalPanel = new javax.swing.JPanel();
        coronalLabel1 = new javax.swing.JLabel();
        coronalLabel = new javax.swing.JLabel();
        coronalLabel3 = new javax.swing.JLabel();
        coronalLabel2 = new javax.swing.JLabel();
        coronalLabel4 = new javax.swing.JLabel();
        coronalSlider = new javax.swing.JSlider();
        axialPanel = new javax.swing.JPanel();
        axialLabel1 = new javax.swing.JLabel();
        axialLabel = new javax.swing.JLabel();
        axialLabel2 = new javax.swing.JLabel();
        axialLabel3 = new javax.swing.JLabel();
        axialSlider = new javax.swing.JSlider();
        axialLabel4 = new javax.swing.JLabel();
        saggitalPanel = new javax.swing.JPanel();
        saggitalLabel = new javax.swing.JLabel();
        saggitalLabel3 = new javax.swing.JLabel();
        saggitalLabel2 = new javax.swing.JLabel();
        saggitalLabel4 = new javax.swing.JLabel();
        saggitalLabel5 = new javax.swing.JLabel();
        saggitalSlider = new javax.swing.JSlider();
        infoPanel = new java.awt.Panel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        xSpinner = new javax.swing.JSpinner();
        ySpinner = new javax.swing.JSpinner();
        zSpinner = new javax.swing.JSpinner();
        zPosLabel = new javax.swing.JLabel();
        yPosLabel = new javax.swing.JLabel();
        xPosLabel = new javax.swing.JLabel();
        neuroView = new javax.swing.JRadioButton();
        radioView = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        buttonGroup1.add(radioView);
        buttonGroup1.add(neuroView);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Barracuda View");
        setIconImage(getMainIcon());
        setMinimumSize(new java.awt.Dimension(600, 600));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        coronalPanel.setBackground(new java.awt.Color(0, 0, 0));
        coronalPanel.setMinimumSize(new java.awt.Dimension(15, 15));
        coronalPanel.setName(""); // NOI18N

        coronalLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        coronalLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coronalLabel1.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");
        coronalLabel1.setToolTipText("");

        coronalLabel.setBackground(new java.awt.Color(0, 0, 0));
        coronalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coronalLabel.setToolTipText("");
        coronalLabel.setMinimumSize(new java.awt.Dimension(10, 10));
        coronalLabel.setName(""); // NOI18N
        coronalLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                coronalLabelMouseDragged(evt);
            }
        });
        coronalLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                coronalLabelMouseClicked(evt);
            }
        });

        coronalLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        coronalLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coronalLabel3.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");
        coronalLabel3.setToolTipText("");

        coronalLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        coronalLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coronalLabel2.setText("<html>\n<font size=4 color=#1aff1a><strong>S</strong><font>");
        coronalLabel2.setToolTipText("");

        coronalLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        coronalLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coronalLabel4.setText("<html> <font size=4 color=#1aff1a><strong>I</strong><font>");
        coronalLabel4.setToolTipText("");

        coronalSlider.setBackground(new java.awt.Color(0, 0, 0));
        coronalSlider.setMinimumSize(new java.awt.Dimension(10, 5));
        coronalSlider.setName(""); // NOI18N
        coronalSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                coronalSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout coronalPanelLayout = new javax.swing.GroupLayout(coronalPanel);
        coronalPanel.setLayout(coronalPanelLayout);
        coronalPanelLayout.setHorizontalGroup(
            coronalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coronalPanelLayout.createSequentialGroup()
                .addComponent(coronalLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(coronalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(coronalSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(coronalLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coronalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(coronalLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(coronalLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );
        coronalPanelLayout.setVerticalGroup(
            coronalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coronalPanelLayout.createSequentialGroup()
                .addComponent(coronalSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(coronalLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(coronalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(coronalLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coronalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                    .addComponent(coronalLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(coronalLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        axialPanel.setBackground(new java.awt.Color(0, 0, 0));
        axialPanel.setMinimumSize(new java.awt.Dimension(15, 15));
        axialPanel.setPreferredSize(new java.awt.Dimension(579, 560));
        axialPanel.setRequestFocusEnabled(false);

        axialLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        axialLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        axialLabel1.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");

        axialLabel.setBackground(new java.awt.Color(0, 0, 0));
        axialLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        axialLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        axialLabel.setMinimumSize(new java.awt.Dimension(10, 10));
        axialLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                axialLabelMouseDragged(evt);
            }
        });
        axialLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                axialLabelMouseClicked(evt);
            }
        });

        axialLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        axialLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        axialLabel2.setText("<html> <font size=4 color=#1aff1a><strong>A</strong><font>");
        axialLabel2.setToolTipText("");

        axialLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        axialLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        axialLabel3.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");

        axialSlider.setBackground(new java.awt.Color(0, 0, 0));
        axialSlider.setMinimumSize(new java.awt.Dimension(10, 5));
        axialSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                axialSliderStateChanged(evt);
            }
        });

        axialLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        axialLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        axialLabel4.setText("<html> <font size=4 color=#1aff1a><strong>P</strong><font>");
        axialLabel4.setToolTipText("");

        javax.swing.GroupLayout axialPanelLayout = new javax.swing.GroupLayout(axialPanel);
        axialPanel.setLayout(axialPanelLayout);
        axialPanelLayout.setHorizontalGroup(
            axialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(axialPanelLayout.createSequentialGroup()
                .addComponent(axialLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(axialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(axialPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(axialLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(axialSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addComponent(axialLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, axialPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(axialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(axialLabel4, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(axialLabel2, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        axialPanelLayout.setVerticalGroup(
            axialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(axialPanelLayout.createSequentialGroup()
                .addComponent(axialLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(axialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(axialLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(axialLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(axialLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(axialLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(axialSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        saggitalPanel.setBackground(new java.awt.Color(0, 0, 0));
        saggitalPanel.setMinimumSize(new java.awt.Dimension(15, 15));
        saggitalPanel.setPreferredSize(new java.awt.Dimension(569, 552));

        saggitalLabel.setBackground(new java.awt.Color(0, 0, 0));
        saggitalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saggitalLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saggitalLabel.setMinimumSize(new java.awt.Dimension(10, 10));
        saggitalLabel.setName(""); // NOI18N
        saggitalLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                saggitalLabelMouseDragged(evt);
            }
        });
        saggitalLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saggitalLabelMouseClicked(evt);
            }
        });

        saggitalLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        saggitalLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saggitalLabel3.setText("<html> <font size=4 color=#1aff1a><strong>A</strong><font>");

        saggitalLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        saggitalLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saggitalLabel2.setText("<html> <font size=4 color=#1aff1a><strong>P</strong><font>");
        saggitalLabel2.setToolTipText("");

        saggitalLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        saggitalLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saggitalLabel4.setText("<html> <font size=4 color=#1aff1a><strong>S</strong><font>");
        saggitalLabel4.setToolTipText("");

        saggitalLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        saggitalLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saggitalLabel5.setText("<html> <font size=4 color=#1aff1a><strong>I</strong><font>");
        saggitalLabel5.setToolTipText("");

        saggitalSlider.setBackground(new java.awt.Color(0, 0, 0));
        saggitalSlider.setMinimumSize(new java.awt.Dimension(10, 5));
        saggitalSlider.setName(""); // NOI18N
        saggitalSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                saggitalSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout saggitalPanelLayout = new javax.swing.GroupLayout(saggitalPanel);
        saggitalPanel.setLayout(saggitalPanelLayout);
        saggitalPanelLayout.setHorizontalGroup(
            saggitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saggitalPanelLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(saggitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, saggitalPanelLayout.createSequentialGroup()
                        .addComponent(saggitalLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addGroup(saggitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(saggitalSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                            .addComponent(saggitalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addComponent(saggitalLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.CENTER, saggitalPanelLayout.createSequentialGroup()
                        .addGroup(saggitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saggitalLabel4, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saggitalLabel5, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        saggitalPanelLayout.setVerticalGroup(
            saggitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saggitalPanelLayout.createSequentialGroup()
                .addComponent(saggitalSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(saggitalLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(saggitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(saggitalLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saggitalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                    .addComponent(saggitalLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saggitalLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        infoPanel.setBackground(new java.awt.Color(240, 240, 240));

        jLabel1.setText("X:");
        jLabel1.setPreferredSize(new java.awt.Dimension(2, 2));

        jLabel2.setText("Y:");
        jLabel2.setPreferredSize(new java.awt.Dimension(2, 2));

        jLabel3.setText("Z:");
        jLabel3.setPreferredSize(new java.awt.Dimension(2, 2));

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        jSpinner1.setPreferredSize(new java.awt.Dimension(50, 22));
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jLabel4.setText("Volume:");

        xSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        xSpinner.setMinimumSize(new java.awt.Dimension(50, 22));
        xSpinner.setName(""); // NOI18N
        xSpinner.setPreferredSize(new java.awt.Dimension(50, 22));
        xSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                xSpinnerStateChanged(evt);
            }
        });

        ySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        ySpinner.setPreferredSize(new java.awt.Dimension(50, 22));
        ySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ySpinnerStateChanged(evt);
            }
        });

        zSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        zSpinner.setPreferredSize(new java.awt.Dimension(50, 22));
        zSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zSpinnerStateChanged(evt);
            }
        });

        yPosLabel.setText(" ");

        xPosLabel.setText(" ");
        xPosLabel.setToolTipText("");

        neuroView.setText("Neurological View");
        neuroView.setSelected(true);
        neuroView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                neuroViewActionPerformed(evt);
            }
        });

        radioView.setText("Radiological View");
        radioView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(neuroView)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(infoPanelLayout.createSequentialGroup()
                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                            .addComponent(zSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(xSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(zPosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(xPosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(yPosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(radioView, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(xSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(xPosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yPosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zPosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(neuroView)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioView)
                .addContainerGap(131, Short.MAX_VALUE))
        );

        jLabel5.setText(" ");

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open Nifti");
        jMenuItem1.setToolTipText("");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(axialPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                    .addComponent(coronalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saggitalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(39, 39, 39))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saggitalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                    .addComponent(coronalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(axialPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                    .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void coronalSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_coronalSliderStateChanged
        if(niiVol!=null){
            drawLabelsXHair(0);
            ySpinner.setValue(coronalSlider.getValue());
            setXYZLabels();
        }
        
    }//GEN-LAST:event_coronalSliderStateChanged

    private void saggitalSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_saggitalSliderStateChanged
        if(niiVol!=null){
            drawLabelsXHair(0);
            xSpinner.setValue(saggitalSlider.getValue());
            setXYZLabels();
        }
    }//GEN-LAST:event_saggitalSliderStateChanged

    private void axialSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_axialSliderStateChanged
         if(niiVol!=null){
            drawLabelsXHair(0);
            zSpinner.setValue(axialSlider.getValue());
            setXYZLabels();
        }
    }//GEN-LAST:event_axialSliderStateChanged

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if(niiVol!=null){
            resizeGraphs();
        }
    }//GEN-LAST:event_formComponentResized

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        if(niiVol!=null){
            // Get volume maximum
            niiVol.setMax3D((int)jSpinner1.getValue());
            drawLabelsXHair(0);
            setXYZLabels();
        }
            
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(MainUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filename = file.getAbsolutePath();
            
            try{
                //Set neurological view as default
                niiVol=null;
                neuroView.setSelected(true);
                coronalLabel1.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");
                coronalLabel3.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");
                axialLabel1.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");
                axialLabel3.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");
                //Read Nifti file
                niiVol= NiftiVolume.read(filename);
                //Get and set the nifti scale
                niiVol.getNiftiScale();
                // Get volume maximum if not already embedded in the header
                if(niiVol.header.cal_max==0){
                    niiVol.setMax3D(0);
                }
                else{niiVol.setMax(niiVol.header.cal_max);}
                System.out.println(niiVol.getMax());
                
                // Added code so default view would be neurological
                if(niiVol.orient[0]=='L'){
                    niiVol.orient[0]='R';
                }else if(niiVol.orient[0]=='R'){
                    niiVol.orient[0]='L';
                }else{
                    System.out.println("Error");
                }
                //Set spinner and slider models
                if(niiVol!=null){
                    SpinnerNumberModel model = new SpinnerNumberModel(0, 0,niiVol.header.dim[4]-1,1);
                    jSpinner1.setModel(model);
                    model = new SpinnerNumberModel(0,0,niiVol.header.dim[1]-1,1);
                    xSpinner.setModel(model);
                    model = new SpinnerNumberModel(0,0,niiVol.header.dim[2]-1,1);
                    ySpinner.setModel(model);
                    model = new SpinnerNumberModel(0,0,niiVol.header.dim[3]-1,1);
                    zSpinner.setModel(model);
                    
                    saggitalSlider.setMaximum(niiVol.header.dim[1]-1);
                    saggitalSlider.setValue((int)(niiVol.header.dim[1]/2));
                    coronalSlider.setMaximum(niiVol.header.dim[2]-1);
                    coronalSlider.setValue((int)(niiVol.header.dim[2]/2));
                    axialSlider.setMaximum(niiVol.header.dim[3]-1);
                    axialSlider.setValue((int)(niiVol.header.dim[3]/2));
                    
                    //Get rotation matrix
                    R=niiVol.header.mat33();
                    setXYZLabels();
                }
            }
            catch (IOException e){
                System.err.println("error: " + e.getMessage());
            }
        } else {
            returnVal=0;
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void xSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_xSpinnerStateChanged
        if(niiVol!=null){
            saggitalSlider.setValue((int)xSpinner.getValue());
        }
    }//GEN-LAST:event_xSpinnerStateChanged

    private void ySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ySpinnerStateChanged
        if(niiVol!=null){
            coronalSlider.setValue((int)ySpinner.getValue());
        }
    }//GEN-LAST:event_ySpinnerStateChanged

    private void zSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zSpinnerStateChanged
        if(niiVol!=null){
            axialSlider.setValue((int)zSpinner.getValue());
        }
    }//GEN-LAST:event_zSpinnerStateChanged

    private void coronalLabelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_coronalLabelMouseDragged
        if(niiVol!=null){
            if(SwingUtilities.isLeftMouseButton(evt)){
                coronalMouseXHair();
            }else if(SwingUtilities.isRightMouseButton(evt)){
                try{
                Point point=coronalLabel.getMousePosition();
                if(prevMouse!=null){
                    if(prevMouse.getY()<point.getY()){
                        niiVol.setMax(niiVol.getMax()*0.98);
                        drawLabelsXHair(0);
                    }
                    else if(prevMouse.getY()>point.getY()& prevMouse !=null){
                        niiVol.setMax(niiVol.getMax()*1.02);
                        drawLabelsXHair(0);
                    }
                    }
                prevMouse=point;
                }catch(Exception e){}
            }
        }
    }//GEN-LAST:event_coronalLabelMouseDragged

    private void coronalLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_coronalLabelMouseClicked
        if(niiVol!=null){
            if(SwingUtilities.isLeftMouseButton(evt)){
                coronalMouseXHair();
            }else if(SwingUtilities.isRightMouseButton(evt)){
                prevMouse=coronalLabel.getMousePosition(false);
            }
        }
    }//GEN-LAST:event_coronalLabelMouseClicked

    private void saggitalLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saggitalLabelMouseClicked
        if(niiVol!=null){
            if(SwingUtilities.isLeftMouseButton(evt)){
            saggitalMouseXHair();
            }else if(SwingUtilities.isRightMouseButton(evt)){
                prevMouse=saggitalLabel.getMousePosition(false);
            }
        }
    }//GEN-LAST:event_saggitalLabelMouseClicked

    private void saggitalLabelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saggitalLabelMouseDragged
        if(niiVol!=null){
            if(SwingUtilities.isLeftMouseButton(evt)){
            saggitalMouseXHair();
            }else if(SwingUtilities.isRightMouseButton(evt)){
                try{
                Point point=saggitalLabel.getMousePosition();
                if(prevMouse!=null){
                    if(prevMouse.getY()<point.getY()){
                        niiVol.setMax(niiVol.getMax()*0.98);
                        drawLabelsXHair(0);
                    }
                    else if(prevMouse.getY()>point.getY()& prevMouse !=null){
                        niiVol.setMax(niiVol.getMax()*1.02);
                        drawLabelsXHair(0);
                    }
                    }
                prevMouse=point;
                }catch(Exception e){}
            }
        }
    }//GEN-LAST:event_saggitalLabelMouseDragged

    private void axialLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_axialLabelMouseClicked
        if(niiVol!=null){
            if(SwingUtilities.isLeftMouseButton(evt)){
            axialMouseXHair();
            }else if(SwingUtilities.isRightMouseButton(evt)){
                prevMouse=axialLabel.getMousePosition(false);
            }
        }
    }//GEN-LAST:event_axialLabelMouseClicked

    private void axialLabelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_axialLabelMouseDragged
        if(niiVol!=null){
            if(SwingUtilities.isLeftMouseButton(evt)){
            axialMouseXHair();
            }
            else if(SwingUtilities.isRightMouseButton(evt)){
                try{
                Point point=axialLabel.getMousePosition();
                if(prevMouse!=null){
                    if(prevMouse.getY()<point.getY()){
                        niiVol.setMax(niiVol.getMax()*0.98);
                        drawLabelsXHair(0);
                    }
                    else if(prevMouse.getY()>point.getY()& prevMouse !=null){
                        niiVol.setMax(niiVol.getMax()*1.02);
                        drawLabelsXHair(0);
                    }
                    }
                prevMouse=point;
                }
                catch(Exception e){}
            }
        }
    }//GEN-LAST:event_axialLabelMouseDragged

    private void radioViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioViewActionPerformed
        if(niiVol!=null){
            if(niiVol.orient[0]=='L'){
                niiVol.orient[0]='R';
            }
            else{
                niiVol.orient[0]='L';
            }
            coronalLabel1.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");
            coronalLabel3.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");
            axialLabel1.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");
            axialLabel3.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");
            drawLabelsXHair(0);
        }
    }//GEN-LAST:event_radioViewActionPerformed

    private void neuroViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neuroViewActionPerformed
        if(niiVol!=null){
            if(niiVol.orient[0]=='L'){
                niiVol.orient[0]='R';
            }
            else{
                niiVol.orient[0]='L';
            }
            coronalLabel1.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");
            coronalLabel3.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");
            axialLabel1.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");
            axialLabel3.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");
            drawLabelsXHair(0);
        }
    }//GEN-LAST:event_neuroViewActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel axialLabel;
    private javax.swing.JLabel axialLabel1;
    private javax.swing.JLabel axialLabel2;
    private javax.swing.JLabel axialLabel3;
    private javax.swing.JLabel axialLabel4;
    private javax.swing.JPanel axialPanel;
    private javax.swing.JSlider axialSlider;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel coronalLabel;
    private javax.swing.JLabel coronalLabel1;
    private javax.swing.JLabel coronalLabel2;
    private javax.swing.JLabel coronalLabel3;
    private javax.swing.JLabel coronalLabel4;
    private javax.swing.JPanel coronalPanel;
    private javax.swing.JSlider coronalSlider;
    private java.awt.Panel infoPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JRadioButton neuroView;
    private javax.swing.JRadioButton radioView;
    private javax.swing.JLabel saggitalLabel;
    private javax.swing.JLabel saggitalLabel2;
    private javax.swing.JLabel saggitalLabel3;
    private javax.swing.JLabel saggitalLabel4;
    private javax.swing.JLabel saggitalLabel5;
    private javax.swing.JPanel saggitalPanel;
    private javax.swing.JSlider saggitalSlider;
    private javax.swing.JLabel xPosLabel;
    private javax.swing.JSpinner xSpinner;
    private javax.swing.JLabel yPosLabel;
    private javax.swing.JSpinner ySpinner;
    private javax.swing.JLabel zPosLabel;
    private javax.swing.JSpinner zSpinner;
    // End of variables declaration//GEN-END:variables

    private Image getMainIcon(){
    Image img;
    //try {
        URL imageurl = getClass().getResource("/images/synapticom2.png");//assuming your package name is images 
        img = Toolkit.getDefaultToolkit().getImage(imageurl);
        //img=ImageIO.read(new File("src/images/synapticom2.png"));
        setIconImage(img);
    //}
    //catch (IOException exc) {
      //  exc.printStackTrace();
    //}
    return img;
    }

    private void setXYZLabels(){
        int XVal=(int)saggitalSlider.getValue();
        int YVal=(int)coronalSlider.getValue();
        int ZVal=(int)axialSlider.getValue();
        String units=niiVol.header.getUnits();
        double xyz[]=niiVol.computeXYZ(R,XVal,YVal,ZVal);
        String numString = String.format ("%.2f ", xyz[0]);
        xPosLabel.setText(numString+units);
        numString = String.format ("%.2f ", xyz[1]);
        yPosLabel.setText(numString+units);
        numString = String.format ("%.2f ", xyz[2]);
        zPosLabel.setText(numString+units);
        double num=niiVol.data.get(XVal, YVal, ZVal, (int)jSpinner1.getValue());
        numString=String.format("%.2f ", num);
        jLabel5.setText(numString);
    }

    private void drawLabelsXHair(int src){
        drawCoronalXHair(src);
        drawSaggitalXHair(src);
        drawAxialXHair(src);
    }

    private void drawCoronalXHair(int src){
        BufferedImage img;
        if(src==0){ //Source is slider
            img = niiVol.drawNiftiSlice(coronalSlider.getValue(), "coronal",(int)jSpinner1.getValue());
            
        }else{
            img = niiVol.drawNiftiSlice((int)ySpinner.getValue(), "coronal",(int)jSpinner1.getValue());
        }
        if(img!=null){         
            coronalScale=UITools.imageToLabel(img,coronalLabel);
            int xVal=saggitalSlider.getValue();
            int yVal=axialSlider.getValue();
            int actualnx=(int) Math.ceil((xVal*niiVol.scale[0])*coronalScale);
            int actualny=(int) Math.ceil((yVal*niiVol.scale[2])*coronalScale);
            img=(BufferedImage)((ImageIcon)coronalLabel.getIcon()).getImage();
            Graphics g =img.getGraphics();
            g.setColor(Color.GREEN);
            if(niiVol.orient[0]=='L'){
                g.drawLine(actualnx, 0, actualnx, img.getHeight());
            }else{
                g.drawLine(img.getWidth()-actualnx, 0, img.getWidth()-actualnx, img.getHeight());
            }
            if(niiVol.orient[2]=='I'){
                g.drawLine(0,img.getHeight()-actualny, img.getWidth(), img.getHeight()-actualny);
            }else{
                g.drawLine(0,actualny, img.getWidth(),actualny);
            }
        }
    }
    
    private void coronalMouseXHair(){
        Point point = coronalLabel.getMousePosition(false);
        if(point!=null){
            int x,y;
            int iconWidth=((BufferedImage)((ImageIcon)coronalLabel.getIcon()).getImage()).getWidth()/2;
            int iconHeight=((BufferedImage)((ImageIcon)coronalLabel.getIcon()).getImage()).getHeight()/2;
            int labelWidth=coronalLabel.getWidth()/2;
            int w=labelWidth*2;
            int labelHeight=coronalLabel.getHeight()/2;
            int h=labelHeight*2;
            if(niiVol.orient[0]=='L'){
                x=(int)(((point.getX())-(labelWidth-iconWidth))/(coronalScale*niiVol.scale[0]));
            }else{
                x=(int)(((w-point.getX())-(labelWidth-iconWidth))/(coronalScale*niiVol.scale[0]));
            }
            if(niiVol.orient[2]=='I'){
                y=(int)(((h-point.getY())-(labelHeight-iconHeight))/(coronalScale*niiVol.scale[2]));
            }else{
                y=(int)(((point.getY())-(labelHeight-iconHeight))/(coronalScale*niiVol.scale[2]));
            }
            saggitalSlider.setValue(x);
            axialSlider.setValue(y);
        }
    }
    
    private void drawSaggitalXHair(int src){
         BufferedImage img;
        if(src==0){ //Source is slider
            img = niiVol.drawNiftiSlice(saggitalSlider.getValue(), "saggital",(int)jSpinner1.getValue());
        }else{
            img = niiVol.drawNiftiSlice((int)xSpinner.getValue(), "saggital",(int)jSpinner1.getValue());
        }
        if(img!=null){
            saggitalScale= UITools.imageToLabel(img,saggitalLabel);
            //y axial x coronal
            int xVal=coronalSlider.getValue();
            int yVal=axialSlider.getValue();
            int actualnx=(int) Math.ceil((xVal*niiVol.scale[1])*saggitalScale);
            int actualny=(int) Math.ceil((yVal*niiVol.scale[2])*saggitalScale);
            img=(BufferedImage)((ImageIcon)saggitalLabel.getIcon()).getImage();
            Graphics g =img.getGraphics();
            g.setColor(Color.GREEN);
            if(niiVol.orient[1]=='P'){
                g.drawLine(actualnx, 0, actualnx, img.getHeight());
            }else{
                g.drawLine(img.getWidth()-actualnx, 0, img.getWidth()-actualnx, img.getHeight());
            }
            if(niiVol.orient[2]=='I'){
                g.drawLine(0,img.getHeight()-actualny, img.getWidth(), img.getHeight()-actualny);
            }else{
                 g.drawLine(0,actualny, img.getWidth(),actualny);
            }
        }
    }
    
    private void saggitalMouseXHair(){
        Point point = saggitalLabel.getMousePosition(false);
        if(point!=null){
            int x,y;
            int iconWidth=((BufferedImage)((ImageIcon)saggitalLabel.getIcon()).getImage()).getWidth()/2;
            int iconHeight=((BufferedImage)((ImageIcon)saggitalLabel.getIcon()).getImage()).getHeight()/2;
            int labelWidth=saggitalLabel.getWidth()/2;
            int w=labelWidth*2;
            int labelHeight=saggitalLabel.getHeight()/2;
            int h=labelHeight*2;
            if(niiVol.orient[1]=='P'){
                x=(int)(((point.getX())-(labelWidth-iconWidth))/(saggitalScale*niiVol.scale[1]));
            }else{
                x=(int)(((w-point.getX())-(labelWidth-iconWidth))/(saggitalScale*niiVol.scale[1]));
            }
            if(niiVol.orient[2]=='I'){
                y=(int)(((h-point.getY())-(labelHeight-iconHeight))/(saggitalScale*niiVol.scale[2]));
            }else{
                y=(int)(((point.getY())-(labelHeight-iconHeight))/(saggitalScale*niiVol.scale[2]));
            }
            coronalSlider.setValue(x);
            axialSlider.setValue(y);
        }
    }
    
    private void drawAxialXHair(int src){
    BufferedImage img;
        if(src==0){ //Source is slider
            img = niiVol.drawNiftiSlice(axialSlider.getValue(), "axial",(int)jSpinner1.getValue());
        }else{
            img = niiVol.drawNiftiSlice((int)zSpinner.getValue(), "axial",(int)jSpinner1.getValue());
        }
        if(img!=null){
            axialScale=UITools.imageToLabel(img,axialLabel);
            //x saggital, y coronal
            int xVal=saggitalSlider.getValue();
            int yVal=coronalSlider.getValue();
            int actualnx=(int) Math.ceil((xVal*niiVol.scale[0])*axialScale);
            int actualny=(int) Math.ceil((yVal*niiVol.scale[1])*axialScale);
            img=(BufferedImage)((ImageIcon)axialLabel.getIcon()).getImage();
            Graphics g =img.getGraphics();
            g.setColor(Color.GREEN);
            if(niiVol.orient[0]=='L'){
                g.drawLine(actualnx, 0, actualnx, img.getHeight());
            }else{
                g.drawLine(img.getWidth()-actualnx, 0, img.getWidth()-actualnx, img.getHeight());
            }
            if(niiVol.orient[1]=='A'){
                g.drawLine( 0,actualny,img.getWidth(),actualny);
            }else{
                g.drawLine( 0,img.getHeight()-actualny, img.getWidth(),img.getHeight()-actualny);
            }
        }
    }
    
    private void axialMouseXHair(){
        Point point = axialLabel.getMousePosition(false);
        if(point!=null){
            int x,y;
            int iconWidth=((BufferedImage)((ImageIcon)axialLabel.getIcon()).getImage()).getWidth()/2;
            int iconHeight=((BufferedImage)((ImageIcon)axialLabel.getIcon()).getImage()).getHeight()/2;
            int labelWidth=axialLabel.getWidth()/2;
            int w=labelWidth*2;
            int labelHeight=axialLabel.getHeight()/2;
            int h=labelHeight*2;
            if(niiVol.orient[0]=='L'){
                x=(int)(((point.getX())-(labelWidth-iconWidth))/(axialScale*niiVol.scale[0]));
            }else{
                x=(int)(((w-point.getX())-(labelWidth-iconWidth))/(axialScale*niiVol.scale[0]));
            }
            if(niiVol.orient[1]=='P'){
                y=(int)(((h-point.getY())-(labelHeight-iconHeight))/(axialScale*niiVol.scale[1]));
            }else{
                y=(int)(((point.getY())-(labelHeight-iconHeight))/(axialScale*niiVol.scale[1]));
            }
            saggitalSlider.setValue(x);
            coronalSlider.setValue(y);
        }
    }
    
    private void resizeGraphs(){
        drawLabelsXHair(0);
    }
}
