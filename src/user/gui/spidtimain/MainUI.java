/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package user.gui.spidtimain;
import data.niftilibrary.niftijio.*;
import java.io.IOException;
import java.io.File;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.net.URL;
import javax.swing.*;
import user.gui.tools.UITools;
//import javax.jnlp.*;

/**
 *  <p>This is the main class for the pspiDTI UI it includes the menus and
 * a NIFTI file viewer.</p>  
 * 
 * @author Diego Garibay-Pulido 2016
 */
public class MainUI extends javax.swing.JFrame {

    /**
     * Creates new form MainUI
     */
    NiftiVolume niiVol;
    NiftiVolume overlayVol;
    double[][] R = new double[3][3];
    double coronalScale;
    double saggitalScale;
    double axialScale;
    Point prevMouse;
    Point zoomStartPoint;
    Point zoomEndPoint;
    String colorScale;
    String colorScaleOverlay;
    boolean viewState=true;
    
    public MainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewGroup = new javax.swing.ButtonGroup();
        volumeSelectorGroup = new javax.swing.ButtonGroup();
        viewActionsGroup = new javax.swing.ButtonGroup();
        colorScaleGroup = new javax.swing.ButtonGroup();
        coronalPanel = new javax.swing.JPanel();
        coronalLabel1 = new javax.swing.JLabel();
        coronalLabel = new javax.swing.JLabel();
        coronalLabel3 = new javax.swing.JLabel();
        coronalLabel2 = new javax.swing.JLabel();
        coronalLabel4 = new javax.swing.JLabel();
        coronalSlider = new javax.swing.JSlider();
        axialPanel = new javax.swing.JPanel();
        axialLabel1 = new javax.swing.JLabel();
        axialLabel = new javax.swing.JLabel();
        axialLabel2 = new javax.swing.JLabel();
        axialLabel3 = new javax.swing.JLabel();
        axialSlider = new javax.swing.JSlider();
        axialLabel4 = new javax.swing.JLabel();
        saggitalPanel = new javax.swing.JPanel();
        saggitalLabel = new javax.swing.JLabel();
        saggitalLabel3 = new javax.swing.JLabel();
        saggitalLabel2 = new javax.swing.JLabel();
        saggitalLabel4 = new javax.swing.JLabel();
        saggitalLabel5 = new javax.swing.JLabel();
        saggitalSlider = new javax.swing.JSlider();
        infoPanel = new java.awt.Panel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        xSpinner = new javax.swing.JSpinner();
        ySpinner = new javax.swing.JSpinner();
        zSpinner = new javax.swing.JSpinner();
        zPosLabel = new javax.swing.JLabel();
        yPosLabel = new javax.swing.JLabel();
        xPosLabel = new javax.swing.JLabel();
        neuroView = new javax.swing.JRadioButton();
        radioView = new javax.swing.JRadioButton();
        colorBar = new javax.swing.JLabel();
        cbm = new javax.swing.JLabel();
        cbm1 = new javax.swing.JLabel();
        colorBar12 = new javax.swing.JLabel();
        colorBar34 = new javax.swing.JLabel();
        colorBar14 = new javax.swing.JLabel();
        colorBarMax = new javax.swing.JTextField();
        colorBarMin = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openVolumeMenu = new javax.swing.JMenuItem();
        overlayVolumeMenu = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        colormapMenu = new javax.swing.JMenu();
        grayScale = new javax.swing.JCheckBoxMenuItem();
        hotScale = new javax.swing.JCheckBoxMenuItem();
        hotInvertScale = new javax.swing.JCheckBoxMenuItem();
        winterScale = new javax.swing.JCheckBoxMenuItem();
        winterInvertScale = new javax.swing.JCheckBoxMenuItem();
        rainbowScale = new javax.swing.JCheckBoxMenuItem();
        resetColorScale = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        crosshairMenu = new javax.swing.JRadioButtonMenuItem();
        zoomMenu = new javax.swing.JRadioButtonMenuItem();
        panMenu = new javax.swing.JRadioButtonMenuItem();
        unZoomMenu = new javax.swing.JMenuItem();
        volumeMenu = new javax.swing.JMenu();
        volumeSelect = new javax.swing.JRadioButtonMenuItem();
        overlaySelect = new javax.swing.JRadioButtonMenuItem();

        viewGroup.add(radioView);
        viewGroup.add(neuroView);
        neuroView.setSelected(true);

        volumeSelectorGroup.add(volumeSelect);
        volumeSelectorGroup.add(overlaySelect);

        viewActionsGroup.add(crosshairMenu);
        viewActionsGroup.add(zoomMenu);
        viewActionsGroup.add(panMenu);

        colorScaleGroup.add(grayScale);
        colorScaleGroup.add(hotScale);
        colorScaleGroup.add(hotInvertScale);
        colorScaleGroup.add(winterScale);
        colorScaleGroup.add(winterInvertScale);
        colorScaleGroup.add(rainbowScale);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Barracuda View");
        setIconImage(getMainIcon());
        setMinimumSize(new java.awt.Dimension(600, 650));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        coronalPanel.setBackground(new java.awt.Color(0, 0, 0));
        coronalPanel.setMinimumSize(new java.awt.Dimension(15, 15));
        coronalPanel.setName(""); // NOI18N
        coronalPanel.setPreferredSize(new java.awt.Dimension(295, 329));

        coronalLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        coronalLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coronalLabel1.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");
        coronalLabel1.setToolTipText("");

        coronalLabel.setBackground(new java.awt.Color(0, 0, 0));
        coronalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coronalLabel.setToolTipText("");
        coronalLabel.setMinimumSize(new java.awt.Dimension(10, 10));
        coronalLabel.setName(""); // NOI18N
        coronalLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                coronalLabelMouseDragged(evt);
            }
        });
        coronalLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                coronalLabelMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                coronalLabelMouseReleased(evt);
            }
        });

        coronalLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        coronalLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coronalLabel3.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");
        coronalLabel3.setToolTipText("");

        coronalLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        coronalLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coronalLabel2.setText("<html>\n<font size=4 color=#1aff1a><strong>S</strong><font>");
        coronalLabel2.setToolTipText("");

        coronalLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        coronalLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coronalLabel4.setText("<html> <font size=4 color=#1aff1a><strong>I</strong><font>");
        coronalLabel4.setToolTipText("");

        coronalSlider.setBackground(new java.awt.Color(0, 0, 0));
        coronalSlider.setMinimumSize(new java.awt.Dimension(10, 5));
        coronalSlider.setName(""); // NOI18N
        coronalSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                coronalSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout coronalPanelLayout = new javax.swing.GroupLayout(coronalPanel);
        coronalPanel.setLayout(coronalPanelLayout);
        coronalPanelLayout.setHorizontalGroup(
            coronalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coronalPanelLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(coronalLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(coronalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(coronalLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coronalSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                    .addComponent(coronalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(coronalLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(coronalLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
        );
        coronalPanelLayout.setVerticalGroup(
            coronalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coronalPanelLayout.createSequentialGroup()
                .addComponent(coronalSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(coronalLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(coronalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(coronalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(coronalLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coronalLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(coronalLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );

        axialPanel.setBackground(new java.awt.Color(0, 0, 0));
        axialPanel.setMinimumSize(new java.awt.Dimension(15, 15));
        axialPanel.setPreferredSize(new java.awt.Dimension(579, 560));
        axialPanel.setRequestFocusEnabled(false);

        axialLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        axialLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        axialLabel1.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");

        axialLabel.setBackground(new java.awt.Color(0, 0, 0));
        axialLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        axialLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        axialLabel.setMinimumSize(new java.awt.Dimension(10, 10));
        axialLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                axialLabelMouseDragged(evt);
            }
        });
        axialLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                axialLabelMouseClicked(evt);
            }
        });

        axialLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        axialLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        axialLabel2.setText("<html> <font size=4 color=#1aff1a><strong>A</strong><font>");
        axialLabel2.setToolTipText("");

        axialLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        axialLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        axialLabel3.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");

        axialSlider.setBackground(new java.awt.Color(0, 0, 0));
        axialSlider.setMinimumSize(new java.awt.Dimension(10, 5));
        axialSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                axialSliderStateChanged(evt);
            }
        });

        axialLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        axialLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        axialLabel4.setText("<html> <font size=4 color=#1aff1a><strong>P</strong><font>");
        axialLabel4.setToolTipText("");

        javax.swing.GroupLayout axialPanelLayout = new javax.swing.GroupLayout(axialPanel);
        axialPanel.setLayout(axialPanelLayout);
        axialPanelLayout.setHorizontalGroup(
            axialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(axialPanelLayout.createSequentialGroup()
                .addComponent(axialLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(axialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(axialLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(axialLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(axialLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(axialSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE))
                .addGap(2, 2, 2)
                .addComponent(axialLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3))
        );
        axialPanelLayout.setVerticalGroup(
            axialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(axialPanelLayout.createSequentialGroup()
                .addComponent(axialLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(axialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(axialLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(axialLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(axialLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(axialLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(axialSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        saggitalPanel.setBackground(new java.awt.Color(0, 0, 0));
        saggitalPanel.setMinimumSize(new java.awt.Dimension(15, 15));
        saggitalPanel.setPreferredSize(new java.awt.Dimension(569, 552));

        saggitalLabel.setBackground(new java.awt.Color(0, 0, 0));
        saggitalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saggitalLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saggitalLabel.setMinimumSize(new java.awt.Dimension(10, 10));
        saggitalLabel.setName(""); // NOI18N
        saggitalLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                saggitalLabelMouseDragged(evt);
            }
        });
        saggitalLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saggitalLabelMouseClicked(evt);
            }
        });

        saggitalLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        saggitalLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saggitalLabel3.setText("<html> <font size=4 color=#1aff1a><strong>A</strong><font>");

        saggitalLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        saggitalLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saggitalLabel2.setText("<html> <font size=4 color=#1aff1a><strong>P</strong><font>");
        saggitalLabel2.setToolTipText("");

        saggitalLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        saggitalLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saggitalLabel4.setText("<html> <font size=4 color=#1aff1a><strong>S</strong><font>");
        saggitalLabel4.setToolTipText("");

        saggitalLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        saggitalLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saggitalLabel5.setText("<html> <font size=4 color=#1aff1a><strong>I</strong><font>");
        saggitalLabel5.setToolTipText("");

        saggitalSlider.setBackground(new java.awt.Color(0, 0, 0));
        saggitalSlider.setMinimumSize(new java.awt.Dimension(10, 5));
        saggitalSlider.setName(""); // NOI18N
        saggitalSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                saggitalSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout saggitalPanelLayout = new javax.swing.GroupLayout(saggitalPanel);
        saggitalPanel.setLayout(saggitalPanelLayout);
        saggitalPanelLayout.setHorizontalGroup(
            saggitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saggitalPanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(saggitalLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(saggitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(saggitalSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                    .addComponent(saggitalLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saggitalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saggitalLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(saggitalLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );
        saggitalPanelLayout.setVerticalGroup(
            saggitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, saggitalPanelLayout.createSequentialGroup()
                .addComponent(saggitalSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(saggitalLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(saggitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(saggitalLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saggitalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addComponent(saggitalLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(saggitalLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );

        infoPanel.setBackground(new java.awt.Color(240, 240, 240));

        jLabel1.setText("X:");
        jLabel1.setPreferredSize(new java.awt.Dimension(2, 2));

        jLabel2.setText("Y:");
        jLabel2.setPreferredSize(new java.awt.Dimension(2, 2));

        jLabel3.setText("Z:");
        jLabel3.setPreferredSize(new java.awt.Dimension(2, 2));

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        jSpinner1.setPreferredSize(new java.awt.Dimension(50, 22));
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jLabel4.setText("Volume:");

        xSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        xSpinner.setMinimumSize(new java.awt.Dimension(50, 22));
        xSpinner.setName(""); // NOI18N
        xSpinner.setPreferredSize(new java.awt.Dimension(50, 22));
        xSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                xSpinnerStateChanged(evt);
            }
        });

        ySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        ySpinner.setPreferredSize(new java.awt.Dimension(50, 22));
        ySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ySpinnerStateChanged(evt);
            }
        });

        zSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        zSpinner.setPreferredSize(new java.awt.Dimension(50, 22));
        zSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zSpinnerStateChanged(evt);
            }
        });

        yPosLabel.setText(" ");

        xPosLabel.setText(" ");
        xPosLabel.setToolTipText("");

        neuroView.setSelected(true);
        neuroView.setText("Neurological View");
        neuroView.setSelected(true);
        neuroView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                neuroViewActionPerformed(evt);
            }
        });

        radioView.setText("Radiological View");
        radioView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioViewActionPerformed(evt);
            }
        });

        colorBar.setToolTipText("");
        colorBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cbm.setText("_");
        cbm.setToolTipText("");
        cbm.setMaximumSize(new java.awt.Dimension(7, 15));
        cbm.setMinimumSize(new java.awt.Dimension(7, 15));
        cbm.setName(""); // NOI18N

        cbm1.setText("_");
        cbm1.setToolTipText("");
        cbm1.setMaximumSize(new java.awt.Dimension(7, 15));
        cbm1.setMinimumSize(new java.awt.Dimension(7, 15));
        cbm1.setName(""); // NOI18N

        colorBar12.setText("_       ");
        colorBar12.setToolTipText("");
        colorBar12.setMaximumSize(new java.awt.Dimension(7, 15));
        colorBar12.setMinimumSize(new java.awt.Dimension(7, 15));
        colorBar12.setName(""); // NOI18N

        colorBar34.setText("_       ");
        colorBar34.setToolTipText("");
        colorBar34.setMaximumSize(new java.awt.Dimension(7, 15));
        colorBar34.setMinimumSize(new java.awt.Dimension(7, 15));
        colorBar34.setName(""); // NOI18N

        colorBar14.setText("_       ");
        colorBar14.setToolTipText("");
        colorBar14.setMaximumSize(new java.awt.Dimension(7, 15));
        colorBar14.setMinimumSize(new java.awt.Dimension(7, 15));
        colorBar14.setName(""); // NOI18N

        colorBarMax.setText("Max");
        colorBarMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorBarMaxActionPerformed(evt);
            }
        });

        colorBarMin.setText("Min");
        colorBarMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorBarMinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(zSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(xSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(yPosLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                                    .addComponent(zPosLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(xPosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addComponent(neuroView)
                    .addComponent(radioView, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(colorBar12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(colorBar14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(colorBar34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addComponent(cbm1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(colorBarMin, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, infoPanelLayout.createSequentialGroup()
                        .addComponent(colorBar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(cbm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(colorBarMax, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(xSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(xPosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(yPosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zPosLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(zSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(neuroView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radioView))
                    .addComponent(colorBar, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addComponent(cbm, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, infoPanelLayout.createSequentialGroup()
                                .addComponent(colorBarMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)))
                        .addComponent(colorBar34, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(colorBar12, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(colorBar14, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(infoPanelLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(cbm1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(colorBarMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)))))
                .addContainerGap(87, Short.MAX_VALUE))
        );

        jLabel5.setText("0.00");

        fileMenu.setText("File");

        openVolumeMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openVolumeMenu.setText("Open Nifti");
        openVolumeMenu.setToolTipText("");
        openVolumeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openVolumeMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openVolumeMenu);

        overlayVolumeMenu.setText("Overlay Volume");
        overlayVolumeMenu.setToolTipText("");
        fileMenu.add(overlayVolumeMenu);

        jMenuBar1.add(fileMenu);

        viewMenu.setText("View");

        colormapMenu.setText("Color scale");
        colormapMenu.setToolTipText("");

        grayScale.setSelected(true);
        grayScale.setText("Grayscale");
        grayScale.setToolTipText("");
        grayScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayScaleActionPerformed(evt);
            }
        });
        colormapMenu.add(grayScale);

        hotScale.setText("Hot");
        hotScale.setToolTipText("");
        hotScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hotScaleActionPerformed(evt);
            }
        });
        colormapMenu.add(hotScale);

        hotInvertScale.setText("Hot (Inverted)");
        hotInvertScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hotInvertScaleActionPerformed(evt);
            }
        });
        colormapMenu.add(hotInvertScale);

        winterScale.setText("Winter");
        winterScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                winterScaleActionPerformed(evt);
            }
        });
        colormapMenu.add(winterScale);

        winterInvertScale.setText("Winter (Inverted)");
        winterInvertScale.setToolTipText("");
        winterInvertScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                winterInvertScaleActionPerformed(evt);
            }
        });
        colormapMenu.add(winterInvertScale);

        rainbowScale.setText("Rainbow");
        rainbowScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rainbowScaleActionPerformed(evt);
            }
        });
        colormapMenu.add(rainbowScale);

        resetColorScale.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        resetColorScale.setText("Reset Colorscale");
        resetColorScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetColorScaleActionPerformed(evt);
            }
        });
        colormapMenu.add(resetColorScale);

        viewMenu.add(colormapMenu);
        viewMenu.add(jSeparator1);

        crosshairMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        crosshairMenu.setSelected(true);
        crosshairMenu.setText("Crosshair");
        viewMenu.add(crosshairMenu);

        zoomMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.ALT_MASK));
        zoomMenu.setText("Zoom");
        viewMenu.add(zoomMenu);

        panMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK));
        panMenu.setText("Pan");
        viewMenu.add(panMenu);

        unZoomMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.ALT_MASK));
        unZoomMenu.setText("Unzoom");
        unZoomMenu.setActionCommand("Reset Zoom");
        unZoomMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unZoomMenuActionPerformed(evt);
            }
        });
        viewMenu.add(unZoomMenu);

        jMenuBar1.add(viewMenu);

        volumeMenu.setText("Volume");
        neuroView.setSelected(true);

        volumeSelect.setSelected(true);
        volumeSelect.setText("Volume");
        volumeMenu.add(volumeSelect);

        overlaySelect.setText("Overlay");
        overlaySelect.setToolTipText("");
        volumeMenu.add(overlaySelect);

        jMenuBar1.add(volumeMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(axialPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                            .addComponent(coronalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saggitalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                    .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(coronalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                    .addComponent(saggitalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(16, 16, 16))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(axialPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel5)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void coronalSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_coronalSliderStateChanged
        if(niiVol!=null){
            drawLabelsXHair();
            ySpinner.setValue(coronalSlider.getValue());
            setXYZLabels();
        }
        
    }//GEN-LAST:event_coronalSliderStateChanged

    private void saggitalSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_saggitalSliderStateChanged
        if(niiVol!=null){
            drawLabelsXHair();
            xSpinner.setValue(saggitalSlider.getValue());
            setXYZLabels();
        }
    }//GEN-LAST:event_saggitalSliderStateChanged

    private void axialSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_axialSliderStateChanged
         if(niiVol!=null){
            drawLabelsXHair();
            zSpinner.setValue(axialSlider.getValue());
            setXYZLabels();
        }
    }//GEN-LAST:event_axialSliderStateChanged

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if(niiVol!=null){
            resizeGraphs();
        }
    }//GEN-LAST:event_formComponentResized

    private void openVolumeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openVolumeMenuActionPerformed
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(MainUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filename = file.getAbsolutePath();
            
            try{
                //Set neurological view as default
                resetGrayScale();
                niiVol=null;
                neuroView.setSelected(true);
                viewState=true;
                
                coronalLabel1.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");
                coronalLabel3.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");
                axialLabel1.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");
                axialLabel3.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");
                //Read Nifti file
                niiVol= NiftiVolume.read(filename);
                
                if(niiVol!=null){
                    //Set the initial draw Range
                    niiVol.setDrawRange(clearDrawRange());
                    volumeSelect.setSelected(true);
                    //Get and set the nifti scale
                    niiVol.getNiftiScale();
                    // Get volume maximum if not already embedded in the header
                    if(niiVol.header.cal_max==0){niiVol.setMax3D(0);}
                    else{niiVol.setMax(niiVol.header.cal_max);}
                    //Get volume minimum if not alread embedded in the header
                    if(niiVol.header.cal_min==0){niiVol.setMin3D(0);}
                    else{niiVol.setMin(niiVol.header.cal_min);}
                    // Added code so default view would be neurological
                    if(niiVol.orient[0]=='L'){niiVol.orient[0]='R';}
                    else if(niiVol.orient[0]=='R'){niiVol.orient[0]='L';}
                    else{System.out.println("Error");}
                    
                    setColorBar();
                    //Set spinner and slider models
                    saggitalSlider.setMaximum(niiVol.header.dim[1]-1);
                    coronalSlider.setMaximum(niiVol.header.dim[2]-1);
                    axialSlider.setMaximum(niiVol.header.dim[3]-1);
                    coronalSlider.setValue((int)(niiVol.header.dim[2]/2));
                    axialSlider.setValue((int)(niiVol.header.dim[3]/2));
                    
                    saggitalSlider.setValue((int)(niiVol.header.dim[1]/2));
                    SpinnerNumberModel model = new SpinnerNumberModel(0, 0,niiVol.header.dim[4]-1,1);
                    jSpinner1.setModel(model);
                    model = new SpinnerNumberModel(0,0,niiVol.header.dim[1]-1,1);
                    xSpinner.setModel(model);
                    model = new SpinnerNumberModel(0,0,niiVol.header.dim[2]-1,1);
                    ySpinner.setModel(model);
                    model = new SpinnerNumberModel(0,0,niiVol.header.dim[3]-1,1);
                    zSpinner.setModel(model);
                    //Get rotation matrix
                    R=niiVol.header.mat33();
                    setXYZLabels();
                }
            }
            catch (IOException e){
                System.err.println("error: " + e.getMessage());
            }
        } else {
            returnVal=0;
        }
    }//GEN-LAST:event_openVolumeMenuActionPerformed

    private void coronalLabelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_coronalLabelMouseDragged
        if(niiVol!=null){
            if(SwingUtilities.isLeftMouseButton(evt)){
                if(crosshairMenu.isSelected()){
                    coronalMouseXHair();
                }else if(zoomMenu.isSelected()){
                    if(zoomStartPoint==null){
                        zoomStartPoint=coronalLabel.getMousePosition(false);
                    }else{
                        zoomEndPoint=coronalLabel.getMousePosition(false);
                        drawCoronalZoomBox();
                    }
                }
            }else if(SwingUtilities.isRightMouseButton(evt)){
                try{
                    mouseAdjustMax(coronalLabel);
                    updateMaxColorbar();
                }catch(Exception e){}
            }
        }
    }//GEN-LAST:event_coronalLabelMouseDragged

    private void coronalLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_coronalLabelMouseClicked
        if(niiVol!=null){
            if(SwingUtilities.isLeftMouseButton(evt)){
                if(crosshairMenu.isSelected()){
                    coronalMouseXHair();
                }else if(zoomMenu.isSelected()){
                    zoomStartPoint=coronalLabel.getMousePosition(false);
                }
            }else if(SwingUtilities.isRightMouseButton(evt)){
                prevMouse=coronalLabel.getMousePosition(false);
            }
        }
    }//GEN-LAST:event_coronalLabelMouseClicked

    private void saggitalLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saggitalLabelMouseClicked
        if(niiVol!=null){
            if(SwingUtilities.isLeftMouseButton(evt)){
            if(crosshairMenu.isSelected()){
                    saggitalMouseXHair();
                }
            }else if(SwingUtilities.isRightMouseButton(evt)){
                prevMouse=saggitalLabel.getMousePosition(false);
            }
        }
    }//GEN-LAST:event_saggitalLabelMouseClicked

    private void saggitalLabelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saggitalLabelMouseDragged
        if(niiVol!=null){
            if(SwingUtilities.isLeftMouseButton(evt)){
            if(crosshairMenu.isSelected()){
                    saggitalMouseXHair();
                }
            }else if(SwingUtilities.isRightMouseButton(evt)){
                try{
                mouseAdjustMax(saggitalLabel);
                updateMaxColorbar();
                }catch(Exception e){}
            }
        }
    }//GEN-LAST:event_saggitalLabelMouseDragged

    private void axialLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_axialLabelMouseClicked
        if(niiVol!=null){
            if(SwingUtilities.isLeftMouseButton(evt)){
            if(crosshairMenu.isSelected()){
                    axialMouseXHair();
                }
            }else if(SwingUtilities.isRightMouseButton(evt)){
                prevMouse=axialLabel.getMousePosition(false);
            }
        }
    }//GEN-LAST:event_axialLabelMouseClicked

    private void axialLabelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_axialLabelMouseDragged
        if(niiVol!=null){
            if(SwingUtilities.isLeftMouseButton(evt)){
                if(crosshairMenu.isSelected()){
                    axialMouseXHair();
                }else if(zoomMenu.isSelected()){
                    
                }
            }
            else if(SwingUtilities.isRightMouseButton(evt)){
                try{
                mouseAdjustMax(axialLabel);
                updateMaxColorbar();
                }
                catch(Exception e){}
            }
        }
    }//GEN-LAST:event_axialLabelMouseDragged

    private void grayScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayScaleActionPerformed
        if(niiVol!=null){
            colorScale="grayscale";
            setColorBar();
            drawLabelsXHair();
        }
    }//GEN-LAST:event_grayScaleActionPerformed

    private void hotScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hotScaleActionPerformed
        if(niiVol!=null){
            colorScale="hot";
            setColorBar();
            drawLabelsXHair();
        }
    }//GEN-LAST:event_hotScaleActionPerformed

    private void hotInvertScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hotInvertScaleActionPerformed
        if(niiVol!=null){
            colorScale="hot_invert";
            setColorBar();
            drawLabelsXHair();
        }
    }//GEN-LAST:event_hotInvertScaleActionPerformed

    private void winterScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_winterScaleActionPerformed
        if(niiVol!=null){
            colorScale="winter";
            setColorBar();
            drawLabelsXHair();
        }
    }//GEN-LAST:event_winterScaleActionPerformed

    private void winterInvertScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_winterInvertScaleActionPerformed
        if(niiVol!=null){
            colorScale="winter_invert";
            setColorBar();
            drawLabelsXHair();
        }
    }//GEN-LAST:event_winterInvertScaleActionPerformed

    private void rainbowScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rainbowScaleActionPerformed
        if(niiVol!=null){
            colorScale="rainbow";
            setColorBar();
            drawLabelsXHair();
        }
    }//GEN-LAST:event_rainbowScaleActionPerformed

    private void resetColorScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetColorScaleActionPerformed
        if(niiVol!=null){
        niiVol.setMax3D((int)jSpinner1.getValue());
        drawLabelsXHair();
        updateMaxColorbar();
        }
    }//GEN-LAST:event_resetColorScaleActionPerformed

    private void zSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zSpinnerStateChanged
        if(niiVol!=null){
            axialSlider.setValue((int)zSpinner.getValue());
        }
    }//GEN-LAST:event_zSpinnerStateChanged

    private void ySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ySpinnerStateChanged
        if(niiVol!=null){
            coronalSlider.setValue((int)ySpinner.getValue());
        }
    }//GEN-LAST:event_ySpinnerStateChanged

    private void xSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_xSpinnerStateChanged
        if(niiVol!=null){
            saggitalSlider.setValue((int)xSpinner.getValue());
        }
    }//GEN-LAST:event_xSpinnerStateChanged

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        if(niiVol!=null){
            // Get volume maximum
            niiVol.setMax3D((int)jSpinner1.getValue());
            niiVol.setMin3D((int)jSpinner1.getValue());
            drawLabelsXHair();
            setXYZLabels();
        }

    }//GEN-LAST:event_jSpinner1StateChanged

    private void colorBarMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorBarMinActionPerformed
       if(niiVol!=null){
            String minString=colorBarMin.getText();
           try{
                double min=Double.parseDouble(minString);
                if(min<0){
                    System.out.println("Negative number : not valid");
                    minString=String.format("%.2f",niiVol.getMin());
                    colorBarMin.setText(minString);
                }
                else if(min>niiVol.getMax()){
                    System.out.println("Min > max : not valid");
                    minString=String.format("%.2f",niiVol.getMin());
                    colorBarMin.setText(minString);
                }
                else{
                    niiVol.setMin(min);
                    drawLabelsXHair();
                }

           }catch(Exception e){
               System.out.println("Must be a valid number :" +e);
               minString=String.format("%.2f",niiVol.getMin());
               colorBarMin.setText(minString);
           }
       }
    }//GEN-LAST:event_colorBarMinActionPerformed

    private void colorBarMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorBarMaxActionPerformed
        if(niiVol!=null){
            String maxString=colorBarMax.getText();
           try{
                double max=Double.parseDouble(maxString);
                if(max<0){
                    System.out.println("Negative number : not valid");
                    maxString=String.format("%.2f",niiVol.getMax());
                    colorBarMax.setText(maxString);
                }
                else if(niiVol.getMin()>max){
                    System.out.println("Max < Min : not valid");
                    maxString=String.format("%.2f",niiVol.getMax());
                    colorBarMax.setText(maxString);
                }
                else{
                    niiVol.setMax(max);
                    drawLabelsXHair();
                }

           }catch(Exception e){
               System.out.println("Must be a valid number :" +e);
               maxString=String.format("%.2f",niiVol.getMax());
               colorBarMax.setText(maxString);
           }
       }
    }//GEN-LAST:event_colorBarMaxActionPerformed

    private void neuroViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neuroViewActionPerformed
        boolean bool =neuroView.isSelected();
        if(bool!=viewState){
        if(niiVol!=null){
            if(niiVol.orient[0]=='L'){
                niiVol.orient[0]='R';
            }else{
                niiVol.orient[0]='L';
            }
            coronalLabel1.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");
            coronalLabel3.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");
            axialLabel1.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");
            axialLabel3.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");
            drawLabelsXHair();
            viewState=true;
        }
        }
    }//GEN-LAST:event_neuroViewActionPerformed

    private void radioViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioViewActionPerformed
        boolean bool=!radioView.isSelected();
        if(bool!=viewState){
        if(niiVol!=null){
            if(niiVol.orient[0]=='L'){
                niiVol.orient[0]='R';
            }else{
                niiVol.orient[0]='L';
            }
            coronalLabel1.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");
            coronalLabel3.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");
            axialLabel1.setText("<html> <font size=4 color=#1aff1a><strong>L</strong><font>");
            axialLabel3.setText("<html> <font size=4 color=#1aff1a><strong>R</strong><font>");
            drawLabelsXHair();
            viewState=false;
        }
        }
    }//GEN-LAST:event_radioViewActionPerformed

    private void coronalLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_coronalLabelMouseReleased
        if(niiVol!=null){
            if(zoomMenu.isSelected()){
                if(SwingUtilities.isLeftMouseButton(evt)){
                        if(zoomStartPoint!=null){
                        zoomEndPoint=coronalLabel.getMousePosition(false);
                        drawCoronalZoomBoxFinal();
                        zoomStartPoint=null;
                        BufferedImage img;
                        img = niiVol.drawNiftiSlice(coronalSlider.getValue(), "coronal",(int)jSpinner1.getValue(),colorScale);
                        UITools.imageToLabel(img, coronalLabel);
                    }
                }else if(SwingUtilities.isRightMouseButton(evt)){
                    niiVol.setDrawRange(clearDrawRange());
                }
            }
        }
    }//GEN-LAST:event_coronalLabelMouseReleased

    private void unZoomMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unZoomMenuActionPerformed
        niiVol.setDrawRange(clearDrawRange());
    }//GEN-LAST:event_unZoomMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel axialLabel;
    private javax.swing.JLabel axialLabel1;
    private javax.swing.JLabel axialLabel2;
    private javax.swing.JLabel axialLabel3;
    private javax.swing.JLabel axialLabel4;
    private javax.swing.JPanel axialPanel;
    private javax.swing.JSlider axialSlider;
    private javax.swing.JLabel cbm;
    private javax.swing.JLabel cbm1;
    private javax.swing.JLabel colorBar;
    private javax.swing.JLabel colorBar12;
    private javax.swing.JLabel colorBar14;
    private javax.swing.JLabel colorBar34;
    private javax.swing.JTextField colorBarMax;
    private javax.swing.JTextField colorBarMin;
    private javax.swing.ButtonGroup colorScaleGroup;
    private javax.swing.JMenu colormapMenu;
    private javax.swing.JLabel coronalLabel;
    private javax.swing.JLabel coronalLabel1;
    private javax.swing.JLabel coronalLabel2;
    private javax.swing.JLabel coronalLabel3;
    private javax.swing.JLabel coronalLabel4;
    private javax.swing.JPanel coronalPanel;
    private javax.swing.JSlider coronalSlider;
    private javax.swing.JRadioButtonMenuItem crosshairMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JCheckBoxMenuItem grayScale;
    private javax.swing.JCheckBoxMenuItem hotInvertScale;
    private javax.swing.JCheckBoxMenuItem hotScale;
    private java.awt.Panel infoPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JRadioButton neuroView;
    private javax.swing.JMenuItem openVolumeMenu;
    private javax.swing.JRadioButtonMenuItem overlaySelect;
    private javax.swing.JMenuItem overlayVolumeMenu;
    private javax.swing.JRadioButtonMenuItem panMenu;
    private javax.swing.JRadioButton radioView;
    private javax.swing.JCheckBoxMenuItem rainbowScale;
    private javax.swing.JMenuItem resetColorScale;
    private javax.swing.JLabel saggitalLabel;
    private javax.swing.JLabel saggitalLabel2;
    private javax.swing.JLabel saggitalLabel3;
    private javax.swing.JLabel saggitalLabel4;
    private javax.swing.JLabel saggitalLabel5;
    private javax.swing.JPanel saggitalPanel;
    private javax.swing.JSlider saggitalSlider;
    private javax.swing.JMenuItem unZoomMenu;
    private javax.swing.ButtonGroup viewActionsGroup;
    private javax.swing.ButtonGroup viewGroup;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JMenu volumeMenu;
    private javax.swing.JRadioButtonMenuItem volumeSelect;
    private javax.swing.ButtonGroup volumeSelectorGroup;
    private javax.swing.JCheckBoxMenuItem winterInvertScale;
    private javax.swing.JCheckBoxMenuItem winterScale;
    private javax.swing.JLabel xPosLabel;
    private javax.swing.JSpinner xSpinner;
    private javax.swing.JLabel yPosLabel;
    private javax.swing.JSpinner ySpinner;
    private javax.swing.JLabel zPosLabel;
    private javax.swing.JSpinner zSpinner;
    private javax.swing.JRadioButtonMenuItem zoomMenu;
    // End of variables declaration//GEN-END:variables

    private Image getMainIcon(){
        Image img;
        URL imageurl = getClass().getResource("/images/synapticom2.png");//assuming your package name is images 
        img = Toolkit.getDefaultToolkit().getImage(imageurl);
        setIconImage(img);
        return img;
    }

    private void setXYZLabels(){
            int XVal=(int)saggitalSlider.getValue();
            int YVal=(int)coronalSlider.getValue();
            int ZVal=(int)axialSlider.getValue();
            String units=niiVol.header.getUnits();
            double xyz[]=niiVol.computeXYZ(R,XVal,YVal,ZVal);
            String numString = String.format ("%.2f ", xyz[0]);
            xPosLabel.setText(numString+units);
            numString = String.format ("%.2f ", xyz[1]);
            yPosLabel.setText(numString+units);
            numString = String.format ("%.2f ", xyz[2]);
            zPosLabel.setText(numString+units);
            if(YVal<niiVol.header.dim[2] & XVal<niiVol.header.dim[1] & ZVal<niiVol.header.dim[3]){
                double num=niiVol.data.get(XVal, YVal, ZVal, (int)jSpinner1.getValue());
                numString=String.format("%.8f ", num);
                jLabel5.setText(numString);
            }

    }

    private void drawLabelsXHair(){
        drawCoronalXHair();
        drawSaggitalXHair();
        drawAxialXHair();
    }

    private void drawCoronalXHair(){
            int Val=coronalSlider.getValue();
            int xVal=saggitalSlider.getValue();
            int yVal=axialSlider.getValue();
            if(Val<niiVol.header.dim[2] & xVal<niiVol.header.dim[1] & yVal<niiVol.header.dim[3]){
                BufferedImage img;
                img = niiVol.drawNiftiSlice(Val, "coronal",(int)jSpinner1.getValue(),colorScale);
                if(img!=null){         
                    coronalScale=UITools.imageToLabel(img,coronalLabel);
                    int actualnx=(int) Math.ceil((xVal*niiVol.scale[0])*coronalScale);
                    int actualny=(int) Math.ceil((yVal*niiVol.scale[2])*coronalScale);
                    img=(BufferedImage)((ImageIcon)coronalLabel.getIcon()).getImage();
                    Graphics g =img.getGraphics();
                    g.setColor(Color.GREEN);
                    if(niiVol.orient[0]=='L'){
                        g.drawLine(actualnx, 0, actualnx, img.getHeight());
                    }else{
                        g.drawLine(img.getWidth()-actualnx, 0, img.getWidth()-actualnx, img.getHeight());
                    }
                    if(niiVol.orient[2]=='I'){
                        g.drawLine(0,img.getHeight()-actualny, img.getWidth(), img.getHeight()-actualny);
                    }else{
                        g.drawLine(0,actualny, img.getWidth(),actualny);
                    }
                }
            }
    }
    
    private void coronalMouseXHair(){
        Point point = coronalLabel.getMousePosition(false);
        if(point!=null){
            int x,y;
            int iconWidth=((BufferedImage)((ImageIcon)coronalLabel.getIcon()).getImage()).getWidth()/2;
            int iconHeight=((BufferedImage)((ImageIcon)coronalLabel.getIcon()).getImage()).getHeight()/2;
            int labelWidth=coronalLabel.getWidth()/2;
            int w=labelWidth*2;
            int labelHeight=coronalLabel.getHeight()/2;
            int h=labelHeight*2;
            if(niiVol.orient[0]=='L'){
                x=(int)(((point.getX())-(labelWidth-iconWidth))/(coronalScale*niiVol.scale[0]));
            }else{
                x=(int)(((w-point.getX())-(labelWidth-iconWidth))/(coronalScale*niiVol.scale[0]));
            }
            if(niiVol.orient[2]=='I'){
                y=(int)(((h-point.getY())-(labelHeight-iconHeight))/(coronalScale*niiVol.scale[2]));
            }else{
                y=(int)(((point.getY())-(labelHeight-iconHeight))/(coronalScale*niiVol.scale[2]));
            }
            saggitalSlider.setValue(x);
            axialSlider.setValue(y);
        }
    }
    
    private void drawSaggitalXHair(){
        int Val=saggitalSlider.getValue();
        int xVal=coronalSlider.getValue();
        int yVal=axialSlider.getValue();
        if(xVal<niiVol.header.dim[2] & Val<niiVol.header.dim[1]& yVal<niiVol.header.dim[3]){
         BufferedImage img;
         img = niiVol.drawNiftiSlice(Val, "saggital",(int)jSpinner1.getValue(),colorScale);
        if(img!=null){
            saggitalScale= UITools.imageToLabel(img,saggitalLabel);
            int actualnx=(int) Math.ceil((xVal*niiVol.scale[1])*saggitalScale);
            int actualny=(int) Math.ceil((yVal*niiVol.scale[2])*saggitalScale);
            img=(BufferedImage)((ImageIcon)saggitalLabel.getIcon()).getImage();
            Graphics g =img.getGraphics();
            g.setColor(Color.GREEN);
            if(niiVol.orient[1]=='P'){
                g.drawLine(actualnx, 0, actualnx, img.getHeight());
            }else{
                g.drawLine(img.getWidth()-actualnx, 0, img.getWidth()-actualnx, img.getHeight());
            }
            if(niiVol.orient[2]=='I'){
                g.drawLine(0,img.getHeight()-actualny, img.getWidth(), img.getHeight()-actualny);
            }else{
                 g.drawLine(0,actualny, img.getWidth(),actualny);
            }
        }
        }
    }
    
    private void saggitalMouseXHair(){
        Point point = saggitalLabel.getMousePosition(false);
        if(point!=null){
            int x,y;
            int iconWidth=((BufferedImage)((ImageIcon)saggitalLabel.getIcon()).getImage()).getWidth()/2;
            int iconHeight=((BufferedImage)((ImageIcon)saggitalLabel.getIcon()).getImage()).getHeight()/2;
            int labelWidth=saggitalLabel.getWidth()/2;
            int w=labelWidth*2;
            int labelHeight=saggitalLabel.getHeight()/2;
            int h=labelHeight*2;
            if(niiVol.orient[1]=='P'){
                x=(int)(((point.getX())-(labelWidth-iconWidth))/(saggitalScale*niiVol.scale[1]));
            }else{
                x=(int)(((w-point.getX())-(labelWidth-iconWidth))/(saggitalScale*niiVol.scale[1]));
            }
            if(niiVol.orient[2]=='I'){
                y=(int)(((h-point.getY())-(labelHeight-iconHeight))/(saggitalScale*niiVol.scale[2]));
            }else{
                y=(int)(((point.getY())-(labelHeight-iconHeight))/(saggitalScale*niiVol.scale[2]));
            }
            coronalSlider.setValue(x);
            axialSlider.setValue(y);
        }
    }
    
    private void drawAxialXHair(){
        
        int Val=axialSlider.getValue();
        int xVal=saggitalSlider.getValue();
        int yVal=coronalSlider.getValue();
        if(yVal<niiVol.header.dim[2] & xVal<niiVol.header.dim[1] & Val<niiVol.header.dim[3]){
        BufferedImage img;
        img = niiVol.drawNiftiSlice(Val, "axial",(int)jSpinner1.getValue(),colorScale);
        if(img!=null){
            axialScale=UITools.imageToLabel(img,axialLabel);
            //x saggital, y coronal
            
            int actualnx=(int) Math.ceil((xVal*niiVol.scale[0])*axialScale);
            int actualny=(int) Math.ceil((yVal*niiVol.scale[1])*axialScale);
            img=(BufferedImage)((ImageIcon)axialLabel.getIcon()).getImage();
            Graphics g =img.getGraphics();
            g.setColor(Color.GREEN);
            if(niiVol.orient[0]=='L'){
                g.drawLine(actualnx, 0, actualnx, img.getHeight());
            }else{
                g.drawLine(img.getWidth()-actualnx, 0, img.getWidth()-actualnx, img.getHeight());
            }
            if(niiVol.orient[1]=='A'){
                g.drawLine( 0,actualny,img.getWidth(),actualny);
            }else{
                g.drawLine( 0,img.getHeight()-actualny, img.getWidth(),img.getHeight()-actualny);
            }
        }
        }
    }
    
    private void axialMouseXHair(){
        Point point = axialLabel.getMousePosition(false);
        if(point!=null){
            int x,y;
            int iconWidth=((BufferedImage)((ImageIcon)axialLabel.getIcon()).getImage()).getWidth()/2;
            int iconHeight=((BufferedImage)((ImageIcon)axialLabel.getIcon()).getImage()).getHeight()/2;
            int labelWidth=axialLabel.getWidth()/2;
            int w=labelWidth*2;
            int labelHeight=axialLabel.getHeight()/2;
            int h=labelHeight*2;
            if(niiVol.orient[0]=='L'){
                x=(int)(((point.getX())-(labelWidth-iconWidth))/(axialScale*niiVol.scale[0]));
            }else{
                x=(int)(((w-point.getX())-(labelWidth-iconWidth))/(axialScale*niiVol.scale[0]));
            }
            if(niiVol.orient[1]=='P'){
                y=(int)(((h-point.getY())-(labelHeight-iconHeight))/(axialScale*niiVol.scale[1]));
            }else{
                y=(int)(((point.getY())-(labelHeight-iconHeight))/(axialScale*niiVol.scale[1]));
            }
            saggitalSlider.setValue(x);
            coronalSlider.setValue(y);
        }
    }
    
    private void resizeGraphs(){
        drawLabelsXHair();
    }
    
    private void mouseAdjustMax(JLabel label){
        Point point=label.getMousePosition();
        if(prevMouse!=null){
            if(prevMouse.getY()<point.getY()){
                niiVol.setMax(niiVol.getMax()*0.98);
                drawLabelsXHair();
            }
            else if(prevMouse.getY()>point.getY()){
                niiVol.setMax(niiVol.getMax()*1.02);
                drawLabelsXHair();
            }
        }
        prevMouse=point;
    }
    
    private void resetGrayScale(){
        //Set the colorscale
        grayScale.setSelected(true);
        colorScale="grayscale";
    }
    
    private void setColorBar(){
        Image img;
        URL imageurl;
        switch(colorScale){
        
            case"grayscale": imageurl= getClass().getResource("/images/grayMap.png");
                break;
            case"hot":imageurl= getClass().getResource("/images/hotMap.png");
                break;
            case"hot_invert":imageurl= getClass().getResource("/images/hotInverseMap.png");
                break;
            case"winter":imageurl= getClass().getResource("/images/winterMap.png");
                break;
            case"winter_invert":imageurl= getClass().getResource("/images/winterInverseMap.png");
                break;
            case"rainbow":imageurl= getClass().getResource("/images/rainbowMap.png");
                break;
            default:imageurl= getClass().getResource("/images/grayMap.png");
                break;
        }
        img =  Toolkit.getDefaultToolkit().getImage(imageurl);
        updateMaxColorbar();
        ImageIcon imageIcon = new ImageIcon(img);
        colorBar.setIcon(imageIcon);
    }
    
    private void updateMaxColorbar(){
        double max,min;
        max=niiVol.getMax();
        min=niiVol.getMin();
        String numString = String.format ("%.2f",max);
        colorBarMax.setText(numString);
        numString=String.format("_%.2f",(3*(max-min)/4));
        colorBar34.setText(numString);
        numString=String.format("_%.2f",((max-min)/2));
        colorBar12.setText(numString);
        numString=String.format("_%.2f",((max-min)/4));
        colorBar14.setText(numString);
        numString = String.format ("%.2f",min);
        colorBarMin.setText(numString);
    }
    private int[][] clearDrawRange(){
        int[][] drawRange=new int[3][4];
        //Saggital Range ny*nz
        drawRange[0][0]=0;// x0
        drawRange[0][1]=0;//y0
        drawRange[0][2]=niiVol.header.dim[2];//x1 ny
        drawRange[0][3]=niiVol.header.dim[3];//y1 nz
         //Coronal Range nx*nz
        drawRange[1][0]=0;// x0
        drawRange[1][1]=0;//y0
        drawRange[1][2]=niiVol.header.dim[1];//x1 nx
        drawRange[1][3]=niiVol.header.dim[3];//y1 nz
         //Axial Range nx*ny
        drawRange[2][0]=0;// x0
        drawRange[2][1]=0;//y0
        drawRange[2][2]=niiVol.header.dim[1];//x1 nx
        drawRange[2][3]=niiVol.header.dim[2];//y1 ny
        return drawRange;
    }
    
    private void drawCoronalZoomBox(){
        BufferedImage img;
        img = niiVol.drawNiftiSlice(coronalSlider.getValue(), "coronal",(int)jSpinner1.getValue(),colorScale);
        UITools.imageToLabel(img, coronalLabel);
        img=(BufferedImage)((ImageIcon)coronalLabel.getIcon()).getImage();
        Graphics g =img.getGraphics();
        g.setColor(Color.GREEN);
        int x0=(int)zoomStartPoint.getX();
        int x1=(int)zoomEndPoint.getX();
        int y0=(int)zoomStartPoint.getY();
        int y1=(int)zoomEndPoint.getY();
        g.drawRect(x0,y0,x1-x0,y1-y0);
        
       
    }
    private void drawCoronalZoomBoxFinal(){
        BufferedImage img;
        img = niiVol.drawNiftiSlice(coronalSlider.getValue(), "coronal",(int)jSpinner1.getValue(),colorScale);
        UITools.imageToLabel(img, coronalLabel);
        img=(BufferedImage)((ImageIcon)coronalLabel.getIcon()).getImage();
        Graphics g =img.getGraphics();
        g.setColor(Color.GREEN);
        int x0=(int)zoomStartPoint.getX();
        int x1=(int)zoomEndPoint.getX();
        int y0=(int)zoomStartPoint.getY();
        int y1=(int)zoomEndPoint.getY();
        g.drawRect(x0,y0,x1-x0,y1-y0);
        
        int iconWidth=((BufferedImage)((ImageIcon)coronalLabel.getIcon()).getImage()).getWidth()/2;
        int iconHeight=((BufferedImage)((ImageIcon)coronalLabel.getIcon()).getImage()).getHeight()/2;
        int labelWidth=coronalLabel.getWidth()/2;
        int w=labelWidth*2;
        int labelHeight=coronalLabel.getHeight()/2;
        int h=labelHeight*2;
        if(niiVol.orient[0]=='L'){
            x0=(int)(((x0)-(labelWidth-iconWidth))/(coronalScale*niiVol.scale[0]));
            x1=(int)(((x1)-(labelWidth-iconWidth))/(coronalScale*niiVol.scale[0]));
        }else{
            x0=(int)(((w-x1)-(labelWidth-iconWidth))/(coronalScale*niiVol.scale[0]));
            x1=(int)(((w-x0)-(labelWidth-iconWidth))/(coronalScale*niiVol.scale[0]));
        }
        if(niiVol.orient[2]=='I'){
            y0=(int)(((h-y1)-(labelHeight-iconHeight))/(coronalScale*niiVol.scale[2]));
            y1=(int)(((h-y0)-(labelHeight-iconHeight))/(coronalScale*niiVol.scale[2]));
        }else{
            y0=(int)(((y0)-(labelHeight-iconHeight))/(coronalScale*niiVol.scale[2]));
            y1=(int)(((y1)-(labelHeight-iconHeight))/(coronalScale*niiVol.scale[2]));
        }
        
        niiVol.setDrawRange(1,0,x0);
        niiVol.setDrawRange(1,1,y0);
        niiVol.setDrawRange(1,2,x1);
        niiVol.setDrawRange(1,3,y1);
    }
        
}
